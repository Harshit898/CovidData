const express = require('express');
const app = express();
const PORT = 3000;
var user_lat, user_long;
const xlsxFile = require('read-excel-file/node');
app.set('view engine', 'ejs');

//distance calculator
function getDistanceFromLatLonInKm(lat1,lon1,lat2,lon2) {
	var R = 6371; // Radius of the earth in km
	var dLat = deg2rad(lat2-lat1);  // deg2rad below
	var dLon = deg2rad(lon2-lon1); 
	var a = 
	  Math.sin(dLat/2) * Math.sin(dLat/2) +
	  Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * 
	  Math.sin(dLon/2) * Math.sin(dLon/2)
	  ; 
	var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); 
	var d = R * c; // Distance in km
	return d;
}

function deg2rad(deg) {
return deg * (Math.PI/180)
}


app.get("/", function (req, res) {
	res.render("home");
});

app.get("/hospital", (req, res) => {
	var qr = req.query.SORTED_BY;
	xlsxFile('hospital.xlsx').then((rows) => {
		for(var i = 1; i < rows.length; i++){
			console.log(rows[i]);
			var dst = getDistanceFromLatLonInKm(parseFloat(user_lat), parseFloat(user_long), parseFloat(rows[i][6].split(",")[0]), parseFloat(rows[i][6].split(",")[1]));
			dst = Number((dst).toFixed(2));
			rows[i][6] = dst;
			console.log(dst);
		}
		rows[0][6] = 100000;
		rows[0][2] = -100000;
		rows[0][4] = -100000;
		switch(qr){
			case "get":
				res.render("getloc");
				break;
			case "ds":
				rows.sort(function(a, b){return a[6] - b[6]});
				res.render("hospital", { data: rows, qr: qr});
				break;
			case "bd":
				rows.sort(function(a, b){return b[2] - a[2]});
				res.render("hospital", { data: rows, qr: qr});
				break;
			case "vt":
				rows.sort(function(a, b){return b[4] - a[4]});
				res.render("hospital", { data: rows, qr: qr});
				break;
		}
	});
});

app.get("/hospital/user_location", (req, res) => {
	user_lat = req.query.lat;
	user_long = req.query.long;
	res.redirect("/hospital?SORTED_BY=ds");
});

app.get("/lab", function (req, res) {
	xlsxFile('lab.xlsx').then((rows) => {
		for(var i = 1; i < rows.length; i++){
			console.log(rows[i]);
			var dst = getDistanceFromLatLonInKm(parseFloat(user_lat), parseFloat(user_long), parseFloat(rows[i][1].split(",")[0]), parseFloat(rows[i][1].split(",")[1]));
			dst = Number((dst).toFixed(2));
			rows[i][1] = dst;
			console.log(dst);
		}
		rows[0][1] = 100000;
		rows.sort(function(a, b){return a[1] - b[1]});
		res.render("lab", { data: rows});
		
	});
});


app.listen(PORT, function (err) {
	if (err) console.log("Error in server setup")
	console.log("Server listening on Port", PORT);
})

